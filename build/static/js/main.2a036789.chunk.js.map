{"version":3,"sources":["pages/LoginPage.jsx","components/Dialog.js","components/Post.jsx","components/TabularListing.js","pages/Home.jsx","components/editor/QuillEditor.js","components/EditPostForm.js","pages/EditPost.js","pages/NewPost.jsx","components/Nav.js","Routes.js","reportWebVitals.js","index.js"],"names":["LoginForm","setUserAuth","useForm","register","handleSubmit","errors","useState","loginErr","setLoginErr","onSubmit","data","a","formData","JSON","stringify","console","log","fetch","process","method","body","headers","Accept","req","json","myJson","status","localStorage","setItem","user","username","display_name","token","Form","className","Group","Label","htmlFor","Control","autoComplete","name","type","placeholder","ref","required","Text","message","password","Button","onClick","BACKEND_URL","AlertDialog","state","open","handleClickOpen","setState","handleClose","handleAgree","getItem","bearer","props","deleteid","Authorization","then","history","push","window","location","reload","catch","err","error","handleDisagree","this","style","display","justifyContent","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","DialogContentText","DialogActions","color","autoFocus","React","Component","withRouter","require","DateTime","options","year","month","day","hour","minute","second","TabularListing","items","config","sortConfig","setSortConfig","useMemo","sortableItems","sort","b","key","direction","requestSort","useSortableData","posts","getClassNamesFor","title","undefined","map","item","published","author_name","fromISO","date_created","toLocaleString","date_modified","target","href","_id","Home","setPosts","useEffect","axios","get","response","getPosts","__ISMSIE__","navigator","userAgent","match","FILE_UPLOAD_LOCATION","Clipboard","getMetaTagElements","stringContent","el","document","createElement","innerHTML","getElementsByTagName","e","clipboardData","getData","pastedData","urlMatches","length","preventDefault","forEach","link","payload","image","url","node","getAttribute","rendered","range","quill","getSelection","position","index","pasteHTML","setSelection","Quill","import","BlockEmbed","ImageBlot","value","imgTag","setAttribute","src","alt","blotName","tagName","VideoBlot","videoTag","iframeTag","FileBlot","prefixTag","innerText","bTag","linkTag","FILE_UPLOAD_LOCATION_GET","appendChild","querySelector","PollBlot","QuillEditor","handleChange","html","editorHtml","onEditorChange","imageHandler","inputOpenImageRef","current","click","videoHandler","inputOpenVideoRef","fileHandler","inputOpenFileRef","insertImage","stopPropagation","currentTarget","files","file","FormData","append","post","header","success","alert","reactQuillRef","getEditor","focus","insertEmbed","fileName","_isMounted","onFilesChange","insertVideo","insertFile","modules","syntax","toolbar","container","handlers","insertPoll","pollHandler","formats","createRef","fetchid","text","defaultValue","onChange","persist","theme","initialiser","accept","EditPostForm","preloadedValues","setText","posttitle","setTitle","coverImage","setCoverImage","setPublished","useParams","defaultValues","useHistory","fontSize","checked","textAlign","margin","event","sendDataToServer","currentUsername","realFormData","cover_image_url","res","imageFormData","EditPost","setData","currentDisplayName","size","htmltype","theNav","userAuth","Navbar","Brand","Nav","to","Link","variant","clear","Routes","Container","Row","Col","exact","path","LoginPage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","basename","getElementById"],"mappings":"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","file":"static/js/main.2a036789.chunk.js","sourcesContent":["import { React, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\n\nconst LoginForm = ({ setUserAuth }) => {\n  const { register, handleSubmit, errors } = useForm();\n  const [loginErr, setLoginErr] = useState(false);\n\n  const onSubmit = async (data) => {\n    const formData = JSON.stringify(data);\n\n    console.log(formData);\n\n    try {\n      const req = await fetch(\n        process.env.REACT_APP_BACKEND_URL+\"login\",\n        //\"https://dovimaj-blog-api.herokuapp.com/api/login\"\n        \n        {\n          method: \"POST\",\n          body: formData,\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n      const myJson = await req.json();\n      if (req.status !== 200) {\n        setLoginErr(true);\n        return;\n      }\n      console.log(\"json response\", myJson);\n\n      localStorage.setItem(\"currentUsername\", myJson.user.username);\n      localStorage.setItem(\"currentDisplayName\", myJson.user.display_name);\n      localStorage.setItem(\"token\", myJson.token);\n      localStorage.setItem(\"userAuth\", true);\n\n      setUserAuth(true);\n    } catch (err) {\n      setLoginErr(true);\n    }\n  };\n\n  return (\n    <Form className=\"layout\">\n      <h3>Login</h3>\n      <Form.Group>\n        <Form.Label htmlFor=\"author_name\">User:</Form.Label>\n        <Form.Control\n          autoComplete=\"username\"\n          name=\"username\"\n          type=\"text\"\n          placeholder=\"Name\"\n          ref={register({ required: \"required field\" })}\n        ></Form.Control>\n        {errors.username && <Form.Text>{errors.username.message}</Form.Text>}\n      </Form.Group>\n\n      <Form.Group>\n        <Form.Label htmlFor=\"password\" placeholder=\"password\">\n          Password:\n        </Form.Label>\n        <Form.Control\n          autoComplete=\"current-password\"\n          name=\"password\"\n          type=\"password\"\n          ref={register({ required: \"required field\" })}\n        ></Form.Control>\n\n        {errors.password && <Form.Text>{errors.password.message} </Form.Text>}\n      </Form.Group>\n\n      {loginErr && <Form.Text>Username or password incorrect</Form.Text>}\n      <Button\n        type=\"submit\"\n        onClick={((e) => e.preventDefault(), handleSubmit(onSubmit))}\n      >\n        Login\n      </Button>\n    </Form>\n  );\n};\n\nexport default LoginForm;\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport {useHistory, withRouter, useLocation} from 'react-router-dom';\n\nconst BACKEND_URL = 'https://real-blog-backend.herokuapp.com/';\n\n//import { useHistory } from 'react-router-dom';\n\nclass AlertDialog extends React.Component {\n\n  //const history = useHistory();\n\n  deleteid;  \n\n  state = {\n    open: false\n  };\n\n  handleClickOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  handleAgree = () => {\n    //console.log(this.props.deleteID);\n    console.log(\"I agree!\");\n    \n    const token = localStorage.getItem(\"token\");\n    const bearer = `Bearer ${token}`;\n\n    try {\n      const req = fetch(\n\n        BACKEND_URL + \n        `posts/${this.props.deleteid}`,\n\n        {\n          method: \"delete\",\n          headers: {\n            Authorization: bearer,\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      ).then(()=>{\n        \n        this.props.history.push(\"/posts\");\n        window.location.reload(); //For when I am on my own page\n      \n      }).catch((err) => {\n        console.log(err);\n\n      });\n\n    } catch (err) {\n      console.error(err);\n    }\n    \n    this.handleClose();\n\n  };\n\n  handleDisagree = () => {\n    console.log(\"I will not delete. I will not do anything. Save yourself.\");\n    this.handleClose();\n  };\n\n  render() {\n    return (\n      <div deleteid={this.props.deleteid} style={{\n        display: \"flex\",\n        justifyContent: \"center\"\n      }}>\n\n        {/* Button to trigger the opening of the dialog */}\n        <Button onClick={this.handleClickOpen}>Delete</Button>\n        {/* Dialog that is displayed if the state open is true */}\n        <Dialog\n          open={this.state.open}\n          onClose={this.handleClose}\n          aria-labelledby=\"alert-dialog-title\"\n          aria-describedby=\"alert-dialog-description\"\n        >\n          <DialogTitle id=\"alert-dialog-title\">\n            {\"Successful Alert\"}\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n              Do you really want to delete this post?\n            </DialogContentText>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleDisagree} color=\"primary\">\n              No\n            </Button>\n            <Button onClick={this.handleAgree} color=\"primary\" autoFocus>\n              Yes\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(AlertDialog);\n","import React from \"react\";\nimport { useRouteMatch, Link } from \"react-router-dom\";\nimport Card from \"react-bootstrap/Card\";\nimport Button from \"react-bootstrap/Button\";\nimport AlertDialog from \"./Dialog\";\nconst { DateTime } = require(\"luxon\");\n\nconst PUBLIC_URL = 'https://real-blog-frontend-public-code.vercel.app/';\n\nconst yes = (e) => {\n  console.log(DateTime.now());\n}\n\nconst Post = ({ post }) => {\n  let match = useRouteMatch();\n  return (\n    <Card\n      style={{\n        width: \"18rem\",\n        padding: \"30px\",\n        borderRadius: \"20px\",\n        maxHeight: \"410px\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\",\n        display: \"flex\",\n        justifyContent: \"center\"\n        \n      }}\n    >\n      <Card.Title>{post.title}</Card.Title>\n      <p><i>Written by {post.author_name}</i></p>\n\n      <p>Created on {DateTime.fromISO(post.date_created).toLocaleString(DateTime.DATE_MED)}</p>\n      <p>Edited on {DateTime.fromISO(post.date_modified).toLocaleString(DateTime.DATE_MED)}</p>\n      \n      <div className=\"choicebuttons\">\n        <Button onClick={yes} variant=\"link\">\n          <a target=\"_blank\" href={`${PUBLIC_URL}posts/${post._id}`}>View Live</a>\n        </Button>\n        <Button variant=\"link\">\n          <Link to={`${match.url}/${post._id}`}>Edit Post</Link>\n        </Button>\n        <AlertDialog deleteid={post._id}></AlertDialog>\n      </div>\n      \n      \n      <Card.Body>{post.text} </Card.Body>\n    </Card>\n  );\n};\n\nexport default Post;\n","//List of references\n\n//Creating a sortable table:\n//https://www.smashingmagazine.com/2020/03/sortable-tables-react/\n\n//Unicode symbols for styling\n//https://unicode-table.com/en/25BC/\n\n//Locale date string \n//https://medium.com/swlh/use-tolocaledatestring-to-format-javascript-dates-2959108ea020\n\nimport React from 'react';\nimport '../styles/tabularlisting.css';\nimport AlertDialog from \"./Dialog\";\nimport Button from \"@material-ui/core/Button\";\n\nconst { DateTime } = require(\"luxon\");\nconst options = {year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit', second: '2-digit' }\n\nconst useSortableData = (items, config = null) => {\n  const [sortConfig, setSortConfig] = React.useState(config);\n\n  const sortedItems = React.useMemo(() => {\n    let sortableItems = [...items];\n    if (sortConfig !== null) {\n      sortableItems.sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? -1 : 1;\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n    return sortableItems;\n  }, [items, sortConfig]);\n\n  const requestSort = (key) => {\n    let direction = 'ascending';\n    if (\n      sortConfig &&\n      sortConfig.key === key &&\n      sortConfig.direction === 'ascending'\n    ) {\n      direction = 'descending';\n    }\n    setSortConfig({ key, direction });\n  };\n\n  return { items: sortedItems, requestSort, sortConfig };\n};\n\nconst TabularListing = ({ posts }) => {\n  const { items, requestSort, sortConfig } = useSortableData(posts);\n  const getClassNamesFor = (title) => {\n    if (!sortConfig) {\n      return;\n    }\n    return sortConfig.key === title ? sortConfig.direction : undefined;\n  };\n  return (\n    <>\n    <h4>Post Listing</h4>\n    <table>\n      \n      <thead>\n\n        <tr>\n\n          <th>\n            <button\n              type=\"button\"\n              onClick={() => requestSort('title')}\n              className={getClassNamesFor('title')}\n            >\n              Title\n            </button>\n          </th>\n\n          <th>\n            <button\n              type=\"button\"\n              onClick={() => requestSort('author_name')}\n              className={getClassNamesFor('author_name')}\n            >\n              Author\n            </button>\n          </th>\n\n          <th>\n            <button\n              type=\"button\"\n              onClick={() => requestSort('date_created')}\n              className={getClassNamesFor('date_created')}\n            >\n              Date Created\n            </button>\n          </th>\n\n          <th>\n            <button\n              type=\"button\"\n              onClick={() => requestSort('date_modified')}\n              className={getClassNamesFor('date_modified')}\n            >\n              Date Modified\n            </button>\n          </th>\n\n          <th>\n            <button\n              type=\"button\"\n              onClick={() => requestSort('published')}\n              className={getClassNamesFor('published') + \" reversed\"}\n            >\n              Draft\n            </button>\n          </th>\n\n          <th>\n\n          </th>\n          <th>\n\n          </th>\n          <th>\n\n          </th>\n\n        </tr>\n      </thead>\n\n\n      <tbody>\n        {items.map((item) => (\n          <tr className={item.published ? \"notDraft\" : \"isDraft\"} key={item._id}>\n            <td>{item.title}{item.published ? \"\" : \" (Draft)\"}</td>\n            <td>{item.author_name}</td>\n            <td>{DateTime.fromISO(item.date_created).toLocaleString(options)}</td>\n            <td>{DateTime.fromISO(item.date_modified).toLocaleString(options)}</td>\n            <td>{item.published ? \"No\" : \"Yes\"}</td>\n            <td>{item.published ? <Button><a target=\"_blank\" href={`${process.env.REACT_APP_PUBLIC_URL}posts/${item._id}`}>View Live</a></Button> : \"\"}</td>\n            <td><Button><a href={`/#/posts/${item._id}`}>Edit</a></Button></td>\n            <td><AlertDialog deleteid={item._id}></AlertDialog></td>\n          </tr>\n        ))}\n      </tbody>\n\n    </table>\n    </>\n  );\n};\n\nexport default TabularListing;","import React, { useEffect, useState } from \"react\";\nimport Post from \"../components/Post\";\nimport TabularListing from \"../components/TabularListing\";\nimport axios from \"axios\";\n\nconst Home = () => {\n\n  const [posts, setPosts] = useState();\n\n  //Retrieves the fullset of posts, including drafts, if authenticated.\n  useEffect(() => {\n\n    const token = localStorage.getItem(\"token\");\n    const bearer = `Bearer ${token}`;\n\n    const getPosts = async () => {\n\n      try {\n        axios.get(process.env.REACT_APP_BACKEND_URL + \"allposts\", {\n          headers:{\n            Authorization: bearer,\n          }\n        }).then((response) => {\n          setPosts(response.data.posts);\n\n        }).catch((err) => {\n          console.log(err);\n        });\n\n      } catch (err) {}\n    };\n\n    getPosts();\n\n  }, []);\n\n  console.log(posts);\n\n  return (\n\n    posts ? <TabularListing posts={posts} /> : <div>Loading...</div>\n\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport ReactQuill, { Quill } from 'react-quill';\nimport \"react-quill/dist/quill.snow.css\";\n\nimport axios from 'axios';\nconst __ISMSIE__ = navigator.userAgent.match(/Trident/i) ? true : false;\n\n\nconst FILE_UPLOAD_LOCATION = process.env.REACT_APP_BACKEND_URL+'uploadfiles';\nconst FILE_UPLOAD_LOCATION_GET = process.env.REACT_APP_BACKEND_URL+'uploads';\n\n\n// Quill.register('modules/clipboard', PlainClipboard, true);\n\nconst QuillClipboard = Quill.import('modules/clipboard');\n\nclass Clipboard extends QuillClipboard {\n\n    getMetaTagElements = (stringContent) => {\n        const el = document.createElement('div');\n        el.innerHTML = stringContent;\n        return el.getElementsByTagName('meta');\n    };\n\n    async onPaste(e) {\n        let clipboardData = e.clipboardData || window.clipboardData;\n        let pastedData = await clipboardData.getData('Text');\n\n        const urlMatches = pastedData.match(/\\b(http|https)?:\\/\\/\\S+/gi) || [];\n        if (urlMatches.length > 0) {\n            e.preventDefault();\n            urlMatches.forEach(link => {\n                axios.get(link)\n                    .then(payload => {\n                        // let title, image, url, description;\n                        let title, image, url;\n                        for (let node of this.getMetaTagElements(payload)) {\n                            if (node.getAttribute(\"property\") === \"og:title\") {\n                                title = node.getAttribute(\"content\");\n                            }\n                            if (node.getAttribute(\"property\") === \"og:image\") {\n                                image = node.getAttribute(\"content\");\n                            }\n                            if (node.getAttribute(\"property\") === \"og:url\") {\n                                url = node.getAttribute(\"content\");\n                            }\n                            // if (node.getAttribute(\"property\") === \"og:description\") {\n                            //     description = node.getAttribute(\"content\");\n                            // }\n                        }\n\n                        const rendered = `<a href=${url} target=\"_blank\"><div><img src=${image} alt=${title} width=\"20%\"/><span>${title}</span></div></a>`;\n\n                        let range = this.quill.getSelection();\n                        let position = range ? range.index : 0;\n                        this.quill.pasteHTML(position, rendered, 'silent');\n                        this.quill.setSelection(position + rendered.length);\n                    })\n                    .catch(error => console.error(error));\n            });\n\n        } else {\n            //console.log('when to use this') 보통 다른 곳에서  paste 한다음에  copy하면 이쪽 걸로 한다. \n            super.onPaste(e);\n        }\n    }\n\n}\nQuill.register('modules/clipboard', Clipboard, true);\n\nconst BlockEmbed = Quill.import('blots/block/embed');\n\nclass ImageBlot extends BlockEmbed {\n\n    static create(value) {\n        const imgTag = super.create();\n        imgTag.setAttribute('src', value.src);\n        imgTag.setAttribute('alt', value.alt);\n        imgTag.setAttribute('width', '100%');\n        return imgTag;\n    }\n\n    static value(node) {\n        return { src: node.getAttribute('src'), alt: node.getAttribute('alt') };\n    }\n\n}\n\nImageBlot.blotName = 'image';\nImageBlot.tagName = 'img';\nQuill.register(ImageBlot);\n\nclass VideoBlot extends BlockEmbed {\n\n    static create(value) {\n        if (value && value.src) {\n            const videoTag = super.create();\n            videoTag.setAttribute('src', value.src);\n            videoTag.setAttribute('title', value.title);\n            videoTag.setAttribute('width', '100%');\n            videoTag.setAttribute('controls', '');\n\n            return videoTag;\n        } else {\n            const iframeTag = document.createElement('iframe');\n            iframeTag.setAttribute('src', value);\n            iframeTag.setAttribute('frameborder', '0');\n            iframeTag.setAttribute('allowfullscreen', true);\n            iframeTag.setAttribute('width', '100%');\n            return iframeTag;\n        }\n    }\n\n    static value(node) {\n        if (node.getAttribute('title')) {\n            return { src: node.getAttribute('src'), alt: node.getAttribute('title') };\n        } else {\n            return node.getAttribute('src');\n        }\n        // return { src: node.getAttribute('src'), alt: node.getAttribute('title') };\n    }\n\n}\n\nVideoBlot.blotName = 'video';\nVideoBlot.tagName = 'video';\nQuill.register(VideoBlot);\n\nclass FileBlot extends BlockEmbed {\n\n    static create(value) {\n        const prefixTag = document.createElement('span');\n        prefixTag.innerText = \"Attachments - \"; //Prior text: 첨부파일\n\n        const bTag = document.createElement('b');\n        //위에 첨부파일 글자 옆에  파일 이름이 b 태그를 사용해서 나온다.\n        bTag.innerText = value;\n\n        const linkTag = document.createElement('a');\n        linkTag.setAttribute('href', FILE_UPLOAD_LOCATION_GET+'/'+value);\n        linkTag.setAttribute(\"target\", \"_blank\");\n        linkTag.setAttribute(\"className\", \"file-link-inner-post\");\n        linkTag.appendChild(bTag);\n        //linkTag 이런식으로 나온다 <a href=\"btn_editPic@3x.png\" target=\"_blank\" classname=\"file-link-inner-post\"><b>btn_editPic@3x.png</b></a>\n\n        const node = super.create();\n        node.appendChild(prefixTag);\n        node.appendChild(linkTag);\n\n        return node;\n    }\n\n    static value(node) {\n        const linkTag = node.querySelector('a');\n        return linkTag.getAttribute('href');\n    }\n\n}\n\nFileBlot.blotName = 'file';\nFileBlot.tagName = 'p';\nFileBlot.className = 'file-inner-post';\nQuill.register(FileBlot);\n\nclass PollBlot extends BlockEmbed {\n\n    static create(value) {\n        const prefixTag = document.createElement('span');\n        prefixTag.innerText = \"투표 - \";\n\n        const bTag = document.createElement('b');\n        bTag.innerText = value.title;\n\n        const node = super.create();\n        node.setAttribute('id', value.id);\n        node.appendChild(prefixTag);\n        node.appendChild(bTag);\n\n        return node;\n    }\n\n    static value(node) {\n        const id = node.getAttribute('id');\n        const bTag = node.querySelector('b');\n        const title = bTag.innerText;\n        return { id, title };\n    }\n\n}\n\nPollBlot.blotName = 'poll';\nPollBlot.tagName = 'p';\nPollBlot.className = 'poll-inner-post';\nQuill.register(PollBlot);\n\nclass QuillEditor extends React.Component {\n\n    fetchid;\n    initialiser;\n    bandId;\n    placeholder;\n    onEditorChange;\n    onFilesChange;\n    onPollsChange;\n    _isMounted;\n\n    constructor(props) {\n        super(props);\n\n        console.log(props);\n\n        this.state = {\n            editorHtml: __ISMSIE__ ? \"<p>&nbsp;</p>\" : \"\",\n            files: [],\n        };\n\n        this.reactQuillRef = null;\n\n        this.inputOpenImageRef = React.createRef();\n        this.inputOpenVideoRef = React.createRef();\n        this.inputOpenFileRef = React.createRef();\n    }\n\n\n\n    componentDidMount() {\n      \n      this._isMounted = true; \n\n      if (this.props.fetchid){\n\n        const getStuff = (id) => {\n          axios.get(process.env.REACT_APP_BACKEND_URL+`posts/${id}`)\n            .then(response => {\n              \n              if(response.status == 200){\n                this.setState({\n                  //editorHtml: this.props.initialiser\n                  editorHtml: response.data.post.text\n                })\n      \n              }else{\n                alert('Couldn`t get blog');\n              }\n            })\n        }\n\n        getStuff(this.props.fetchid);\n\n          \n        }\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n\n    handleChange = (html) => {\n        console.log('html', html)\n        // https://youtu.be/BbR-QCoKngE\n        // https://www.youtube.com/embed/ZwKhufmMxko\n        // https://tv.naver.com/v/9176888\n        // renderToStaticMarkup(ReactHtmlParser(html, options));\n\n        this.setState({\n            editorHtml: html\n        }, () => {\n            this.props.onEditorChange(this.state.editorHtml);\n        });\n    };\n\n    // I V F P들을  눌렀을떄 insertImage: this.imageHandler로 가서  거기서 inputOpenImageRef를 클릭 시킨다. \n    imageHandler = () => {\n        this.inputOpenImageRef.current.click();\n    };\n\n    videoHandler = () => {\n        this.inputOpenVideoRef.current.click();\n    };\n\n    fileHandler = () => {\n        this.inputOpenFileRef.current.click();\n    };\n\n\n    insertImage = (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n\n        if (e.currentTarget && e.currentTarget.files && e.currentTarget.files.length > 0) {\n            const file = e.currentTarget.files[0];\n\n            let formData = new FormData();\n            const config = {\n                header: { 'content-type': 'multipart/form-data' }\n            }\n            formData.append(\"file\", file);\n\n            axios.post(FILE_UPLOAD_LOCATION, formData, config)\n                .then(response => {\n                    if (response.data.success) {\n\n                        const quill = this.reactQuillRef.getEditor();\n                        quill.focus();\n\n                        let range = quill.getSelection();\n                        let position = range ? range.index : 0;\n\n                        //먼저 노드 서버에다가 이미지를 넣은 다음에   여기 아래에 src에다가 그걸 넣으면 그게 \n                        //이미지 블롯으로 가서  크리에이트가 이미지를 형성 하며 그걸 발류에서     src 랑 alt 를 가져간후에  editorHTML에 다가 넣는다.\n                        \n                        console.log(\"The response data url\", response.data.url);\n\n                        quill.insertEmbed(position, \"image\", { src: process.env.REACT_APP_BACKEND_URL + response.data.url, alt: response.data.fileName });\n                        quill.setSelection(position + 1);\n\n                        if (this._isMounted) {\n                            this.setState({\n                                files: [...this.state.files, file]\n                            }, () => { this.props.onFilesChange(this.state.files) });\n                        }\n                    } else {\n                        return alert('failed to upload image file')\n                    }\n                })\n        }\n    };\n\n    insertVideo = (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n\n        if (e.currentTarget && e.currentTarget.files && e.currentTarget.files.length > 0) {\n            const file = e.currentTarget.files[0];\n\n            let formData = new FormData();\n            const config = {\n                header: { 'content-type': 'multipart/form-data' }\n            }\n            formData.append(\"file\", file);\n\n            axios.post(FILE_UPLOAD_LOCATION, formData, config)\n                .then(response => {\n                    if (response.data.success) {\n\n                        const quill = this.reactQuillRef.getEditor();\n                        quill.focus();\n\n                        let range = quill.getSelection();\n                        let position = range ? range.index : 0;\n                        quill.insertEmbed(position, \"video\", { src: process.env.REACT_APP_BACKEND_URL + response.data.url, title: response.data.fileName });\n                        quill.setSelection(position + 1);\n\n                        if (this._isMounted) {\n                            this.setState({\n                                files: [...this.state.files, file]\n                            }, () => { this.props.onFilesChange(this.state.files) });\n                        }\n                    } else {\n                        return alert('failed to upload file')\n                    }\n                })\n        }\n    }\n\n    insertFile = (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n\n        if (e.currentTarget && e.currentTarget.files && e.currentTarget.files.length > 0) {\n            const file = e.currentTarget.files[0];\n            console.log(file);\n\n            let formData = new FormData();\n            const config = {\n                header: { 'content-type': 'multipart/form-data' }\n            }\n            formData.append(\"file\", file);\n\n            axios.post(FILE_UPLOAD_LOCATION, formData, config)\n                .then(response => {\n                    if (response.data.success) {\n\n                        const quill = this.reactQuillRef.getEditor();\n                        quill.focus();\n\n                        let range = quill.getSelection();\n                        let position = range ? range.index : 0;\n                        quill.insertEmbed(position, \"file\", response.data.fileName);\n                        quill.setSelection(position + 1);\n\n                        if (this._isMounted) {\n                            this.setState({\n                                files: [...this.state.files, file]\n                            }, () => { this.props.onFilesChange(this.state.files) });\n                        }\n                    };\n                })\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <div id=\"toolbar\">\n                    <select className=\"ql-header\" defaultValue={\"\"} onChange={e => e.persist()}>\n                        <option value=\"1\" />\n                        <option value=\"2c\" />\n                        <option value=\"\" />\n                    </select>\n                    <button className=\"ql-bold\" />\n                    <button className=\"ql-italic\" />\n                    <button className=\"ql-underline\" />\n                    <button className=\"ql-strike\" />\n                    <button className=\"ql-insertImage\">\n                        I\n                    </button>\n                    <button className=\"ql-insertVideo\">\n                        V\n                    </button>\n                    <button className=\"ql-insertFile\">\n                        F\n                    </button>\n                    <button className=\"ql-link\" />\n                    <button className=\"ql-code-block\" />\n                    <button className=\"ql-video\" />\n                    <button className=\"ql-blockquote\" />\n                    <button className=\"ql-clean\" />\n\n                    \n\n                </div>\n                <ReactQuill\n                    ref={(el) => { this.reactQuillRef = el }}\n                    theme={'snow'}\n                    onChange={this.handleChange}\n                    modules={this.modules}\n                    formats={this.formats}\n                    value={this.state.editorHtml}\n                    placeholder={this.props.placeholder}\n                    initialiser={this.props.initialiser}\n                    fetchid={this.props.fetchid}\n                />\n                <input type=\"file\" accept=\"image/*\" ref={this.inputOpenImageRef} style={{ display: \"none\" }} onChange={this.insertImage} />\n                <input type=\"file\" accept=\"video/*\" ref={this.inputOpenVideoRef} style={{ display: \"none\" }} onChange={this.insertVideo} />\n                <input type=\"file\" accept=\"*\" ref={this.inputOpenFileRef} style={{ display: \"none\" }} onChange={this.insertFile} />\n            </div>\n        )\n    }\n\n    modules = {\n        syntax: false,//true requires highlight.js but idk how to include it LMAO i dont know how webdev works bruh i just copy code\n        toolbar: {\n            container: \"#toolbar\",\n            //id =\"toorbar\"는  그 위에 B I U S I V F P 이거 있는 곳이다. \n            handlers: {\n                insertImage: this.imageHandler,\n                insertVideo: this.videoHandler,\n                insertFile: this.fileHandler,\n                insertPoll: this.pollHandler,\n            }\n        },\n\n    };\n\n    formats = [\n        'header',\n        'bold', 'italic', 'underline', 'strike',\n        'image', 'video', 'file', 'link',\"code-block\", \"video\", \"blockquote\", \"clean\"\n    ];\n}\n\nexport default QuillEditor;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport Button from \"@material-ui/core/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport QuillEditor from \"../components/editor/QuillEditor\";\nimport AlertDialog from \"./Dialog\";\nimport axios from \"axios\";\n\nconst BACKEND_URL = 'https://real-blog-backend.herokuapp.com/';\n\nconst FILE_UPLOAD_LOCATION = BACKEND_URL+'uploadfiles';\n\nexport const EditPostForm = ({preloadedValues}) => {\n\n  const [text, setText] = useState(\"\");\n  const [title, setTitle] = useState(preloadedValues.posttitle);\n  const [coverImage, setCoverImage] = useState(null);\n  const [published, setPublished] = useState(preloadedValues.published);\n\n  let { id } = useParams();\n\n  console.log(\"The preloaded values are\", preloadedValues);\n\n  console.log(\"The data to be posted is\", text, title, published)\n\n  const { register, handleSubmit } = useForm({\n    defaultValues: preloadedValues\n  });\n\n\n  let history = useHistory();\n  \n\n  console.log(\"Id has been set?\", id);\n\n  const onSubmit = (event) => {\n\n    console.log(\"submitting....\");\n\n    event.preventDefault(); //This prevents default behaviour of pressing submit: The page refreshing without saving!\n\n    const sendDataToServer = (coverImage)=>{\n\n      const currentUsername = localStorage.getItem(\"currentUsername\");\n      const token = localStorage.getItem(\"token\");\n      const bearer = `Bearer ${token}`;\n      \n      \n      const realFormData = coverImage ? JSON.stringify({\n        title,\n        text,\n        author_name:currentUsername, //IN future patches change to userinfo.displayname\n        published,\n        cover_image_url: coverImage\n      }) : JSON.stringify({\n        title,\n        text,\n        author_name:currentUsername, //IN future patches change to userinfo.displayname\n        published\n      });\n\n      //console.log(realFormData);\n\n      try {\n        const req = fetch(\n          BACKEND_URL+`posts/${id}`,\n          {\n            method: \"PUT\",\n            body: realFormData,\n            headers: {\n              Authorization: bearer,\n              \"Content-Type\": \"application/json\",\n            },\n          }\n        ).then((res) => {\n          //console.log(res);\n\n          if(res.status == 200){\n            setText(\"\");//reset values\n            setTitle(\"\");\n\n            history.push(\"/posts\"); //Redirect back to post listing\n          \n          } else{\n            alert(\"Failed to upload, please try again!\");\n          }\n\n        }).catch((err) => {\n          console.log(err);\n        })      \n      } catch (err) {console.log(err);}\n    }\n\n    //Only if user wants to upload a cover image then we do the upload.\n    if(coverImage){\n\n      //Prepare the cover image for upload.\n\n      let imageFormData = new FormData();\n      imageFormData.append(\"file\", coverImage);\n\n      const config = {\n        header: { 'content-type': 'multipart/form-data' }\n      }\n\n      //Try to post the cover image and get back the URL as a response.\n      axios.post(FILE_UPLOAD_LOCATION, imageFormData, config)\n        .then(res => {\n          if(res.data.success) { //URL is stored in res.data.url\n            sendDataToServer(res.data.url);\n          }else{ //file didn't upload\n            sendDataToServer('uploads/default.webp');\n          }\n      }).catch(err => {\n        sendDataToServer('uploads/default.webp');\n      });\n\n\n    }else{\n      sendDataToServer(false);\n    }\n\n\n    \n  };\n\n  const suckMyTits = (e) => {\n    console.log(e);\n  }\n\n  const handleTitleChange = (e) => {\n    console.log(e.target.value);\n    setTitle(e.target.value);\n  }\n\n  const onEditorChange = (value) =>{\n    setText(value);\n    //console.log(value);\n  }\n\n  const onFilesChange = (value) => {\n    //console.log(value);\n  }\n\n  const onCheckboxChange = (e) => {\n    console.log(e.currentTarget.checked);\n    setPublished(e.currentTarget.checked);\n    //console.log(published);\n  }\n\n  const coverImageChange = (e) => {\n    console.log(e.currentTarget.files[0]);\n    setCoverImage(e.currentTarget.files[0]);\n  }\n\n  return (\n    <div className=\"layout\">\n\n    <form>\n        <div>\n          <label>My Title</label><br />\n          {/* value={title} onChange = {(e)=>setTitle(e.target.value)}  */}\n          <input ref={register} placeholder=\"My Title\" name=\"posttitle\" onChange={handleTitleChange}fontSize='2em' type='text'/> <br /><br />\n        </div>\n\n        <div>\n          <label>Publish to the web</label>\n          <input ref={register} checked={published} name=\"published\" className='mycheckbox' type='checkbox'\n\t\t\t\tonChange={onCheckboxChange} />\n        </div>\n\n        <div>\n          {/* <label>Edit the cover image</label><br />\n          \n          <input type=\"radio\" id=\"CIS1\" name=\"coverImageSelector\"></input>\n          <label for=\"CIS1\">Use the existing cover image</label><br />\n          \n          <input type=\"radio\" id=\"CIS2\" name=\"coverImageSelector\"></input>\n          <label for=\"CIS2\">Use the default image</label><br />\n\n          <input type=\"radio\" id=\"CIS3\" name=\"coverImageSelector\"></input>\n          <label for=\"CIS3\">Choose a new file: <input type=\"file\" onChange={coverImageChange}></input></label>\n           */}\n          Choose a new cover image: <input type=\"file\" onChange={coverImageChange}></input>\n          \n        </div><br />\n\n        <QuillEditor\n                \n          placeholder={\"Start Posting Something\"}\n          modules={{\n            toolbar:[['bold', 'italic'], ['link', 'image']]\n          }}\n          onEditorChange={onEditorChange}\n          onFilesChange={onFilesChange}\n          fetchid={id}\n          \n        />\n\n        <div style={{ textAlign: 'center', margin: '2rem', }}>\n          <Button onClick={onSubmit} color=\"primary\">Save Post</Button>\n        </div>\n\n        <div style={{ textAlign: 'center', margin: '2rem', }}>\n          <AlertDialog deleteid={id}/>\n        </div>\n\n      </form>\n    </div>\n  );\n};\n\n","import React, {useEffect, useState} from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { EditPostForm } from \"../components/EditPostForm\";\nimport axios from \"axios\";\n\nfunction EditPost() {\n  const [data, setData] = useState(null)\n\n  let { id } = useParams();\n \n  useEffect(() => {  \n\n    axios.get(process.env.REACT_APP_BACKEND_URL+`posts/${id}`)\n      .then(response => {\n        if(response.status == 200){\n          setData({\n            posttitle:response.data.post.title,\n            published:response.data.post.published\n          });          \n        }else{\n          alert('Couldn`t get post data');\n        }\n    })\n    \n\n  }, [])\n\n  return data ? <EditPostForm preloadedValues={data} /> : <div>Loading...</div>\n}\n\nexport default EditPost;","import { useState, useEffect, React } from \"react\";\nimport { useHistory, withRouter } from \"react-router-dom\";\nimport { useForm } from \"react-hook-form\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport QuillEditor from \"../components/editor/QuillEditor\";\nimport axios from \"axios\";\n\nconst FILE_UPLOAD_LOCATION = process.env.REACT_APP_BACKEND_URL+'uploadfiles';\n\nconst NewPost = () => {\n  const [successMsg, setSuccessMsg] = useState(false);\n\n  //const { register, handleSubmit, errors } = useForm();\n\n  const [text, setText] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [coverImage, setCoverImage] = useState(null);\n  const [published, setPublished] = useState(false);\n\n  let history = useHistory();\n\n  useEffect(()=>{\n     console.log(published)\n  })\n\n  const onSubmit = (event) => {\n\n    event.preventDefault(); //This prevents default behaviour of pressing submit: The page refreshing without saving!\n    \n    //Method to POST data to the server.\n    const sendDataToServer = async (coverImage) => {\n      \n      //const currentUsername = localStorage.getItem(\"currentUsername\");\n      const currentDisplayName = localStorage.getItem(\"currentDisplayName\");\n      const token = localStorage.getItem(\"token\");\n      const bearer = `Bearer ${token}`;\n\n      const realFormData = JSON.stringify({\n        title,\n        text,\n        author_name:currentDisplayName, //IN future patches change to userinfo.displayname\n        published,\n        cover_image_url: coverImage ? coverImage : '' //URL for the cover Image\n      });\n\n      try {\n        \n        const req = await fetch(\n          \n          process.env.REACT_APP_BACKEND_URL+'posts/',\n\n          {\n            method: \"post\",\n            body: realFormData,\n            headers: {\n              Authorization: bearer,\n              \"Content-Type\": \"application/json\",\n            },\n          }\n        ).then((res) => {\n\n          console.log(res);\n\n          if(res.status === 200){\n            setText(\"\");//reset values\n            setTitle(\"\");\n\n            history.push(\"/posts\"); //Redirect back to post listing\n          \n          } else{\n            alert(\"Failed to upload, please try again!\");\n          }\n\n          \n\n        }).catch((err) => {\n          console.log(err);\n        });      \n        \n      } catch (err) {\n        console.log(err);\n      }\n      \n    }\n\n    //Prepare the cover image for upload.\n\n    let imageFormData = new FormData();\n    imageFormData.append(\"file\", coverImage);\n\n    const config = {\n      header: { 'content-type': 'multipart/form-data' }\n    }\n\n    //Try to post the cover image and get back the URL as a response.\n    axios.post(FILE_UPLOAD_LOCATION, imageFormData, config)\n      .then(res => {\n        console.log(\"something something\");\n\n        if(res.data.success) { //URL is stored in res.data.url\n          console.log(\"Image has been sent to the server. Now sending post data.\")\n          sendDataToServer(res.data.url);\n        }else{ //file didn't upload\n          sendDataToServer('uploads/default.webp');\n        }\n    }).catch(err => {\n      console.log(err);\n      sendDataToServer('uploads/default.webp');\n    });\n\n  }\n\n  const onEditorChange = (value) =>{\n    setText(value);\n  }\n\n  const onFilesChange = (value) => {\n    //console.log(value);\n  }\n\n  const onCheckboxChange = (e) => {\n    console.log(e.currentTarget.checked);\n    setPublished(e.currentTarget.checked);\n    //console.log(published);\n  }\n\n  const coverImageChange = (e) => {\n    console.log(e.currentTarget.files[0]);\n    setCoverImage(e.currentTarget.files[0]);\n  }\n\n\n\n  return (\n    <div>\n\n      <form onSubmit={onSubmit}>\n        <div>\n          <label>My Title</label><br />\n          <input fontSize='2em' type='text' placeholder='Title' value={title} onChange = {(e)=>setTitle(e.target.value)} /> <br /><br />\n        </div>\n\n        <div>\n          <label>Publish to the web</label>\n          <input className='mycheckbox' type='checkbox'\n\t\t\t\tonChange={onCheckboxChange} />\n        </div>\n\n        <div>\n          <label>Add in a cover image (Recommended size: X by Y)</label>\n          <input type=\"file\" onChange={coverImageChange}></input>\n        </div>\n\n        <QuillEditor\n          placeholder={\"Start Posting Something\"}\n          modules={{\n            toolbar:[['bold', 'italic'], ['link', 'image']]\n          }}\n          onEditorChange={onEditorChange}\n          onFilesChange={onFilesChange}\n        />\n\n        <div style={{ textAlign: 'center', margin: '2rem', }}>\n          <button\n            size=\"large\"\n            htmltype=\"submit\"\n            className=\"\"\n          >\n            Submit\n                </button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\nexport default withRouter(NewPost);\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nconst theNav = ({ userAuth, setUserAuth }) => {\n  const logout = () => {\n    setUserAuth(false);\n    localStorage.clear();\n  };\n\n  return (\n    <Navbar>\n      <Navbar.Brand>\n        {\" \"}\n        <h1>My Blog</h1>\n      </Navbar.Brand>\n      <Nav className=\"mr-auto\">\n        <LinkContainer to=\"/posts\">\n          <Nav.Link>Home</Nav.Link>\n        </LinkContainer>\n        <LinkContainer to=\"/newpost\">\n          <Nav.Link>New Post</Nav.Link>\n        </LinkContainer>\n      </Nav>\n      {userAuth && (\n        <Button variant=\"outline-success\" onClick={logout}>\n          Logout\n        </Button>\n      )}\n    </Navbar>\n  );\n};\n\nexport default theNav;\n","import { Route, HashRouter, Switch, Redirect } from \"react-router-dom\";\nimport LoginPage from \"./pages/LoginPage\";\nimport Home from \"./pages/Home.jsx\";\nimport { useEffect, useState } from \"react\";\nimport PostPage from \"./pages/EditPost\";\nimport NewPost from \"./pages/NewPost\";\nimport Nav from \"./components/Nav\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\n\nfunction Routes() {\n  const [userAuth, setUserAuth] = useState(false);\n\n  useEffect(() => {\n    const user = localStorage.getItem(\"userAuth\");\n    if (user) {\n      setUserAuth(true);\n    } else {\n      setUserAuth(false);\n    }\n  }, []);\n\n  return (\n    <>\n      <Container>\n        <Row>\n          <Col>\n            {\" \"}\n            <Nav\n              userAuth={userAuth}\n              setUserAuth={setUserAuth}\n              className=\"Nav\"\n            />\n            <Switch>\n              {\" \"}\n              <Route exact path=\"/\">\n                <Redirect to=\"/posts\" />\n              </Route>\n              <Route exact path=\"/posts\">\n                {!userAuth ? <LoginPage setUserAuth={setUserAuth} /> : <Home />}\n              </Route>\n              <Route exact path=\"/posts/:id\">\n                {!userAuth ? (\n                  <LoginPage setUserAuth={setUserAuth} />\n                ) : (\n                  <PostPage />\n                )}\n              </Route>\n              <Route path=\"/newpost\">\n                {!userAuth ? (\n                  <LoginPage setUserAuth={setUserAuth} />\n                ) : (\n                  <NewPost />\n                )}\n              </Route>\n              <Route path=\"/\">\n                <p>404</p>\n              </Route>\n            </Switch>\n          </Col>\n        </Row>\n      </Container>\n    </>\n  );\n}\n\nexport default Routes;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport Routes from \"./Routes\";\nimport \"./index.css\";\n\n//require(\"dotenv\").config();\n\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <HashRouter basename={process.env.PUBLIC_URL}>\n    <Routes />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}